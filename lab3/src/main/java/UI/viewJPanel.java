/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.Application;
import Model.Observation;
import Model.VitalSignHistory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author haohe
 */
public class viewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form viewJPanel
     */
    private Application application;
    DefaultTableModel viewtableModel;
    
    Observation selectedObservation;
    public viewJPanel() {
        initComponents();
        
    }

    viewJPanel(Application application) {
        initComponents();
        this.application=application;
        this.viewtableModel = (DefaultTableModel) observationTable.getModel();
        displayObservations();
        
// Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
   
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        fieldObservationID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fieldTemperature1 = new javax.swing.JTextField();
        fieldBloodPressure = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        observationTable = new javax.swing.JTable();
        viewObservationButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("view and update vital sign");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 17, -1, -1));

        jLabel2.setText("ID");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        updateButton.setText("Update Observation");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, -1, -1));

        fieldObservationID.setEnabled(false);
        add(fieldObservationID, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 110, -1));

        jLabel3.setText("Tmeperature");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        jLabel4.setText("BloodPressure");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, 20));
        add(fieldTemperature1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 110, -1));
        add(fieldBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, 110, -1));

        observationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "temperature", "BloodPressure"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(observationTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, 280, 380));

        viewObservationButton.setText("view details");
        viewObservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewObservationButtonActionPerformed(evt);
            }
        });
        add(viewObservationButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 480, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void viewObservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewObservationButtonActionPerformed
        // TODO add your handling code here:
        // what was clicked? get the row in the table that was clicked
        int selectedRow= observationTable.getSelectedRow();
        if(selectedRow >=0){
            // we can directly fetch the Observation object from the Zeroth position
            this.selectedObservation  = (Observation)observationTable.getValueAt(selectedRow,0);
            //fill all the text fields
            fieldObservationID.setText(String.valueOf(this.selectedObservation.getObservationId()));
            fieldBloodPressure.setText(String.valueOf(this.selectedObservation.getBloodPressure()));
            fieldTemperature1.setText(String.valueOf(this.selectedObservation.getTemperature()));
        }else{
            // no selection made by thfindObservatione user
            JOptionPane.showMessageDialog(null,"Please select a row!");
        }
    }//GEN-LAST:event_viewObservationButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        //update the observation object
        if(!fieldObservationID.getText().isEmpty()){
        // call the findObservation
        Observation o=this.application.getHistory().findObservation(Integer.valueOf(fieldObservationID.getText()));
        o.setBloodPressure(Double.valueOf(fieldBloodPressure.getText()));
        o.setTemperature(Double.valueOf(fieldTemperature1.getText()));
        
//        this.selectedObservation.setBloodPressure(Double.valueOf(fieldBloodPressure.getText()));
//        this.selectedObservation.setTemperature(Double.valueOf(fieldTemperature1.getText()));
        
        }else{
            JOptionPane.showMessageDialog(null,"no selections!");
            
        }
        displayObservations();
    }//GEN-LAST:event_updateButtonActionPerformed

public void displayObservations(){
    VitalSignHistory history = this.application.getHistory();
    if(history.getVitalSignHistory().size()>0){
        //display
        viewtableModel.setRowCount(0);
        for(Observation o: history.getVitalSignHistory()){
            // number of columns in the table=3
            Object row[] = new Object[3];
            row[0]=o;
            row[1]=o.getTemperature();
            row[2]=o.getBloodPressure(); 
            
            // add the row to the table
            viewtableModel.addRow(row);
            
        }
    }else{
        System.out.println("Empty list");
    }
    
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fieldBloodPressure;
    private javax.swing.JTextField fieldObservationID;
    private javax.swing.JTextField fieldTemperature1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable observationTable;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton viewObservationButton;
    // End of variables declaration//GEN-END:variables
}
